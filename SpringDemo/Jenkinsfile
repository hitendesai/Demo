/*
 Requires:
  - build-timestamp
  - pipeline-utility-steps
  - nexus-artifact-uploader

*/

pipeline
{
  agent any
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(artifactDaysToKeepStr: '7', artifactNumToKeepStr: '10', daysToKeepStr: '7', numToKeepStr: '10'))
    //timestamps()
  }
  triggers {
    githubPush()
  }

  tools {
    maven 'M3'
  }

  environment
  {
    // global server level
    NEXUS_PROTO = 'http'
    NEXUS_HOST  = "nexus.devopsinabox.perficientdevops.com"
    NEXUS_PORT  = "8081"
    NEXUS_CREDSID = 'nexus-admin'

    // job specific
    GIT_REPO = 'https://github.com/hitendesai/Demo'
    NEXUS_REPOSITORY = 'Demo'
    NEXUS_GROUP = ''

  }

/*
  parameters {
  }
*/

  stages
  {
    stage( "Checkout Source"){
      steps{
        checkout scm
      }
    }


    stage( "Setup Environment Variables from workspace metadata" ) {
      steps{
        script {
          // read configuration from source, pipeline utility steps provides
          // readProperties, readJson, readMavenPom, readYaml, readManifest

          def props = readMavenPom file: 'SpringDemo/pom.xml'
          def version = props['version']

          APP_ID = props['name']
          NEXUS_GROUP = props['groupId']

          // expecting timestamp to be in yyyyMMdd-HHmmss format
          VERSION = "${version}_${BUILD_TIMESTAMP}"
          VERSION_TAG="${VERSION}"
          ARTIFACT_FILENAME="${APP_ID}-${version}.jar"
          // modify build name to match
          currentBuild.displayName = "${VERSION_TAG}"
        }
        sh "echo 'version: ${VERSION}'"
        sh "echo 'version_tag: ${VERSION_TAG}'"
        sh "echo 'artifact_filename: ${ARTIFACT_FILENAME}'"

      }
    }

    stage('Build, Test, and Package') {
      steps
      {
        dir( 'SpringDemo' ){
          sh 'mvn package -Dmaven.test.skip=true'
        }

      }
    } // end Build

    // stage('Publish JUnit Results') {
    //   steps
    //   {
    //     junit '**/build/surefire-reports/TEST-*.xml'
    //     archive 'build/*.jar'
    //   }
    // }

    stage( 'Test Connectivity to Nexus' ){
      steps{
        //sh 'ping -c 2 $NEXUS_HOST'
        sh "wget '${NEXUS_HOST}:${NEXUS_PORT}'"
      }
    }

    // Publish version to Nexus
    stage('Publish to Nexus') {
      steps
      {
        nexusArtifactUploader artifacts:
          [[artifactId: APP_ID, classifier: '', file: "SpringDemo/target/${ARTIFACT_FILENAME}", type: 'jar']],
          credentialsId: NEXUS_CREDSID,
          groupId: NEXUS_GROUP,
          nexusUrl: "$NEXUS_HOST:$NEXUS_PORT",
          nexusVersion: 'nexus3',
          protocol: NEXUS_PROTO,
          repository: NEXUS_REPOSITORY,
          version: VERSION
      }
    }

    // Trigger deployment
    stage('Deploy to Development') {
      steps
      {
        sh "echo 'Deployment'"
      }
    }

  } //end stages

  // Post build sections available
  // https://jenkins.io/doc/book/pipeline/syntax/#post
  /*
  post {
    always {}
    changed {}
    failure {}
    success {}
    unstable {}
    aborted {}
  }
*/
} // end node
